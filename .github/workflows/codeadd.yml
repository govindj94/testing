name: Add Database template to env.yml file

on:
  workflow_dispatch:
    inputs:
      realmId:
        description: 'Realm Id to create databases for'
        required: false
      envName:
        type: choice 
        description: 'Select Environment name '
        required: true
        options:
        - dev_us
        - tst_us
        - stg_us
        - prd_us
permissions:
  contents: write        
env:
  REALMID: ${{ github.event.inputs.realmId}}
  CURRENT_ENV: ${{ github.event.inputs.envName }}
  pattern: "^max_capacity: 5"
#  string_to_append: "\n- name: "Deploy SQL Database"\n  register: "_stratosphere_sql_database"\n  by.stratosphere.resource:\n    stage: "{{ stratosphere_stage }}"\n    geography: "{{ stratosphere_geography }}"\n    client_id: "{{ stratosphere_service_account_client_id }}"\n    client_secret: "{{ stratosphere_service_account_client_secret }}"\n    project: "{{ stratosphere_project_name }}"\n    name: "${{ env.REALMID }}"\n    type: "azure-sql-database"\n    spec:\n      database:\n        sku:\n          name: "Basic"\n        max_size_bytes: 1073741824\n        zone_redundant: false\n        license_type: "BasePrice"\n      server:\n        name: "{{ _stratosphere_sql_server['resource']['name'] }}"\n      elastic_pool:\n        name: "{{ _stratosphere_sql_elastic_pool['resource']['name'] }}"\n    wait_time: 1200 # 20 minutes"
  file_path: "dev_us.yml"  # Path to your file
#  sed -i '$a\\n- name: "Deploy SQL Database"\n  register: "_stratosphere_sql_database"\n  by.stratosphere.resource:\n    stage: "{{ stratosphere_stage }}"\n    geography: "{{ stratosphere_geography }}"\n    client_id: "{{ stratosphere_service_account_client_id }}"\n    client_secret: "{{ stratosphere_service_account_client_secret }}"\n    project: "{{ stratosphere_project_name }}"\n    name: "${{ env.REALMID }}"\n    type: "azure-sql-database"\n    spec:\n      database:\n        sku:\n          name: "Basic"\n        max_size_bytes:\n        zone_redundant: false\n        license_type: "BasePrice"\n      server:\n        name: "{{ _stratosphere_sql_server['resource']['name'] }}"\n      elastic_pool:\n        name: "{{ _stratosphere_sql_elastic_pool['resource']['name'] }}"\n    wait_time: 1200 # 20 minutes\n' dev_us.yml  

jobs:
  Add-code:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        
      - name: Get Branch Name
        id: branch_name
        run: echo "BRANCH_NAME=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV
      
      - name: Print Branch Name
        run: echo "Current branch is ${{ env.BRANCH_NAME }}"  
        
      - name: Check Dev-us.yml exists
        # https://github.com/andstor/file-existence-action
        continue-on-error: false
        id: check_dev_us_yml
        uses: andstor/file-existence-action@v2
        with:
          # dev-us.yml
          files: '${{ env.CURRENT_ENV }}.yml'  

      - name: Add database_template to Dev_us.yml file
        if: steps.check_dev_us_yml.outputs.files_exists == 'true'
#        working-directory: ./${{ env.CURRENT_ENV }}/stratosphere/
        run: |
           sed -E "/${{ env.pattern }}/ s/$\\n- name: \"Deploy SQL Database\"\\n  register: \"_stratosphere_sql_database\"\\n  by.stratosphere.resource:\\n    stage: \"{{ stratosphere_stage }}\"\\n    geography: \"{{ stratosphere_geography }}\"\\n    client_id: \"{{ stratosphere_service_account_client_id }}\"\\n    client_secret: \"{{ stratosphere_service_account_client_secret }}\"\\n    project: \"{{ stratosphere_project_name }}\"\\n    name: \"${{ env.REALMID }}\"\\n    type: \"azure-sql-database\"\\n    spec:\\n      database:\\n        sku:\\n          name: \"Basic\"\\n        max_size_bytes: 1073741824\\n        zone_redundant: false\\n        license_type: \"BasePrice\"\\n      server:\\n        name: \"{{ _stratosphere_sql_server['resource']['name'] }}\"\\n      elastic_pool:\\n        name: \"{{ _stratosphere_sql_elastic_pool['resource']['name'] }}\"\\n    wait_time: 1200 # 20 minutes\"/\" \"${{ env.file_path }}\" > \"${{ env.file_path }}.tmp\" && mv \"${{ env.file_path }}.tmp\" \"${{ env.file_path }}\"

      - name: Check for diff
        # If git detects changes, steps.check-for-diff.outputs.diff-status be set to true, else it will be false
        shell: bash
        id: check-for-diff
        run: |
          # shellcheck disable=SC2086
          GIT_STATUS=$(git status --porcelain=1)
          # shellcheck disable=SC2086
          echo GIT_STATUS=$GIT_STATUS
          CHANGED=$([[ -z $GIT_STATUS ]] && echo "false" || echo "true")
          # shellcheck disable=SC2086
          echo CHANGED=$CHANGED
          # shellcheck disable=SC2086
          echo "git-status=${GIT_STATUS}" >> "$GITHUB_OUTPUT"
          # shellcheck disable=SC2086
          echo "changed=${CHANGED}" >> "$GITHUB_OUTPUT"
      
      - name: Commit changes
        # If changes are present, commit them. This step will commit modifications and add new files, too.
        if: steps.check-for-diff.outputs.changed == 'true'
        uses: EndBug/add-and-commit@v9
        with:
          default_author: github_actions
          add: '*.yml'
      
      - name: Set Default PR Title
        if: env.PR_TITLE == null
        run: |
          echo "PR_TITLE=Update" >> "$GITHUB_ENV"
          
      - name: Create PR for updated API
        # Create a deployments PR for the updated specification. This is only done if a PR doesn't already exist for the branch.
        #if: steps.check-for-diff.outputs.changed == 'true' && steps.checkout-existing-pr.outcome == 'failure'
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}
        run: |
          gh pr create --title "Update" --body "This is to update database template in env.yml file" --base main --fill      

