name: Add Database template to env.yml file

on:
  workflow_dispatch:
    inputs:
      realmId:
        description: 'Realm Id to create databases for'
        required: false
      envName:
        description: 'Environment name (dev-us, tst-us, stg-us, prd-us)'
        required: true  
permissions:
  contents: write        
env:
  REALMID: ${{ github.event.inputs.realmId}}
  CURRENT_ENV: ${{ github.event.inputs.envName }}

jobs:
  Add-code:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        
      - name: Check Dev-us.yml exists
        # https://github.com/andstor/file-existence-action
        continue-on-error: false
        id: check_dev_us_yml
        uses: andstor/file-existence-action@v2
        with:
          # dev-us.yml
          files: '${{ env.CURRENT_ENV }}.yml'  

      - name: Add database_template to Dev-us.yml file
        if: steps.check_dev_us_yml.outputs.files_exists == 'true'
#        working-directory: ./${{ env.CURRENT_ENV }}/stratosphere/
        run: |
            sed -i '$a\\n- name: "Deploy SQL Database"\n  register: "_stratosphere_sql_database"\n  by.stratosphere.resource:\n    stage: "{{ stratosphere_stage }}"\n    geography: "{{ stratosphere_geography }}"\n    client_id: "{{ stratosphere_service_account_client_id }}"\n    client_secret: "{{ stratosphere_service_account_client_secret }}"\n    project: "{{ stratosphere_project_name }}"\n    name: "${{ env.REALMID }}"\n    type: "azure-sql-database"\n    spec:\n      database:\n        sku:\n          name: "Basic"\n        max_size_bytes:\n        zone_redundant: false\n        license_type: "BasePrice"\n      server:\n        name: "{{ _stratosphere_sql_server['resource']['name'] }}"\n      elastic_pool:\n        name: "{{ _stratosphere_sql_elastic_pool['resource']['name'] }}"\n    wait_time: 1200 # 20 minutes\n' dev_us.yml
        
      - name: Commit changes
        uses: EndBug/add-and-commit@v9
        with:
          default_author: github_actions
          add: '*.yml'
      
      - name: Set Default PR Title
        if: env.PR_TITLE == null
        run: |
          echo "PR_TITLE=Update" >> "$GITHUB_ENV"
          
      - name: Create PR for updated API
        # Create a deployments PR for the updated specification. This is only done if a PR doesn't already exist for the branch.
        #if: steps.check-for-diff.outputs.changed == 'true' && steps.checkout-existing-pr.outcome == 'failure'
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}
        run: |
          gh pr create \
            --title "[YMS] ${{ env.PR_TITLE }} ${{ env.CURRENT_ENV }}" \
            --base main \
            --fill      

