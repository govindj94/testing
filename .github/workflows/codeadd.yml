name: Add Database template to env.yml file

on:
  workflow_dispatch:
    inputs:
      realmId:
        description: 'Realm Id to create databases for'
        required: false
      envName:
        type: choice 
        description: 'Select Environment name '
        required: true
        options:
        - dev_us
        - tst_us
        - stg_us
        - prd_us
permissions:
  contents: write        
env:
  REALMID: ${{ github.event.inputs.realmId}}
  CURRENT_ENV: ${{ github.event.inputs.envName }}
  # Referenced name in commit and PR message
  GIT_SERVICE_NAME: yms
  # Name to use as the author of the commit
  GIT_AUTHOR: YMS Automation
  # Email address to use for the author of the commit
  GIT_EMAIL: github-action-pr-bot@github.com
  BRANCH_NAME: feature/realm_add

#  sed -i '$a\\n- name: "Deploy SQL Database"\n  register: "_stratosphere_sql_database"\n  by.stratosphere.resource:\n    stage: "{{ stratosphere_stage }}"\n    geography: "{{ stratosphere_geography }}"\n    client_id: "{{ stratosphere_service_account_client_id }}"\n    client_secret: "{{ stratosphere_service_account_client_secret }}"\n    project: "{{ stratosphere_project_name }}"\n    name: "${{ env.REALMID }}"\n    type: "azure-sql-database"\n    spec:\n      database:\n        sku:\n          name: "Basic"\n        max_size_bytes:\n        zone_redundant: false\n        license_type: "BasePrice"\n      server:\n        name: "{{ _stratosphere_sql_server['resource']['name'] }}"\n      elastic_pool:\n        name: "{{ _stratosphere_sql_elastic_pool['resource']['name'] }}"\n    wait_time: 1200 # 20 minutes\n' dev_us.yml  
#  sed -i "${line_number}i \\    - name: "Deploy SQL Database"\n      register: "_stratosphere_sql_database"\n      by.stratosphere.resource:\n        stage: "{{ stratosphere_stage }}"\n        geography: "{{ stratosphere_geography }}"\n        client_id: "{{ stratosphere_service_account_client_id }}"\n        client_secret: "{{ stratosphere_service_account_client_secret }}"\n        project: "{{ stratosphere_project_name }}"\n        name: "ecom_${{ env.REALMID }}\"\n        type: "azure-sql-database"\n        spec:\n          database:\n            sku:\n              name: "Basic"\n            max_size_bytes: 1073741824\n            zone_redundant: false\n            license_type: "BasePrice"\n          server:\n            name: "{{ _stratosphere_sql_server['resource']['name'] }}"\n          elastic_pool:\n            name: "{{ _stratosphere_sql_elastic_pool['resource']['name'] }}"\n        wait_time: 1200 # 20 minutes" dev_us.yml

jobs:
  Add-code:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        
      - name: Create and Checkout New Branch
        run: |
          git checkout -b ${{ env.BRANCH_NAME }}
      
      - name: Print Branch Name
        run: echo "Current branch is ${{ env.BRANCH_NAME }}"  
        
      - name: Check if given realmID is already present
        id: check
        working-directory: ./${{ env.CURRENT_ENV }}/stratosphere/
        run: |
          if grep -q "ecom_${{ env.REALMID }}" ${{ env.CURRENT_ENV }}.yml; then
            echo "Error: ecom_${{ env.REALMID }} is already present in ${{ env.CURRENT_ENV }}.yml"
            exit 1
          fi 
        
      - name: Check env.yml exists
        # https://github.com/andstor/file-existence-action
        continue-on-error: false
        id: check_env_yml
        uses: andstor/file-existence-action@v2
        with:
          # dev-us.yml
          files: './${{ env.CURRENT_ENV }}/stratosphere/${{ env.CURRENT_ENV }}.yml'  

 #     - name: Add database_template to Dev_us.yml file
 #       if: steps.check_env_yml.outputs.files_exists == 'true'
 #        working-directory: ./${{ env.CURRENT_ENV }}/stratosphere/
 #       run: |
 #          sed -E "/${{ env.pattern }}/ s/$\\n- name: \"Deploy SQL Database\"\\n  register: \"_stratosphere_sql_database\"\\n  by.stratosphere.resource:\\n    stage: \"{{ stratosphere_stage }}\"\\n    geography: \"{{ stratosphere_geography }}\"\\n    client_id: \"{{ stratosphere_service_account_client_id }}\"\\n    client_secret: \"{{ stratosphere_service_account_client_secret }}\"\\n    project: \"{{ stratosphere_project_name }}\"\\n    name: \"ecom_${{ env.REALMID }}\"\\n    type: \"azure-sql-database\"\\n    spec:\\n      database:\\n        sku:\\n          name: \"Basic\"\\n        max_size_bytes: 1073741824\\n        zone_redundant: false\\n        license_type: \"BasePrice\"\\n      server:\\n        name: \"{{ _stratosphere_sql_server['resource']['name'] }}\"\\n      elastic_pool:\\n        name: \"{{ _stratosphere_sql_elastic_pool['resource']['name'] }}\"\\n    wait_time: 1200 # 20 minutes\"/\" \"${{ env.file_path }}\" > \"${{ env.file_path }}.tmp\" && mv \"${{ env.file_path }}.tmp\" \"${{ env.file_path }}\"
      
#      - name: Check if given realmID is already present
#        working-directory: ./${{ env.CURRENT_ENV }}/stratosphere/
 #       run: |
 #         if grep -q "ecom_${{ env.REALMID }}" ${{ env.CURRENT_ENV }}.yml; then
 #           echo "Given realmID is already present. Skipping task append."
  #          exit 0
  #        fi
        
      - name: Find Pattern and Append Task
        if: steps.check_env_yml.outputs.files_exists == 'true'
        working-directory: ./${{ env.CURRENT_ENV }}/stratosphere/
        run: |
          # Find pattern in the file and store the line number
          line_number=$(grep -n "max_capacity:" ${{ env.CURRENT_ENV }}.yml | cut -d ":" -f 1)
          line_number=$((line_number + 2))
          echo "Pattern found at line number: $line_number"
          
          # Append Ansible task after the pattern in the YAML file
          sed -i "${line_number}i \\    - name: \"Deploy SQL Database\"\n      register: \"_stratosphere_sql_database\"\n      by.stratosphere.resource:\n        stage: \"{{ stratosphere_stage }}\"\n        geography: \"{{ stratosphere_geography }}\"\n        client_id: \"{{ stratosphere_service_account_client_id }}\"\n        client_secret: \"{{ stratosphere_service_account_client_secret }}\"\n        project: \"{{ stratosphere_project_name }}\"\n        name: \"ecom_${{ env.REALMID }}\"\n        type: \"azure-sql-database\"\n        spec:\n          database:\n            sku:\n              name: \"Basic\"\n            max_size_bytes: 1073741824\n            zone_redundant: false\n            license_type: \"BasePrice\"\n          server:\n            name: \"{{ _stratosphere_sql_server['resource']['name'] }}\"\n          elastic_pool:\n            name: \"{{ _stratosphere_sql_elastic_pool['resource']['name'] }}\"\n        wait_time: 1200 # 20 minutes\n " ${{ env.CURRENT_ENV }}.yml
          
      - name: Check for diff
        # If git detects changes, steps.check-for-diff.outputs.diff-status be set to true, else it will be false
        
        shell: bash
        id: check-for-diff
        run: |
          # shellcheck disable=SC2086
          GIT_STATUS=$(git status --porcelain=1)
          # shellcheck disable=SC2086
          echo GIT_STATUS=$GIT_STATUS
          CHANGED=$([[ -z $GIT_STATUS ]] && echo "false" || echo "true")
          # shellcheck disable=SC2086
          echo CHANGED=$CHANGED
          # shellcheck disable=SC2086
          echo "git-status=${GIT_STATUS}" >> "$GITHUB_OUTPUT"
          # shellcheck disable=SC2086
          echo "changed=${CHANGED}" >> "$GITHUB_OUTPUT"
      
      - name: Commit updated
        # If changes are present, commit them. This step will commit modifications and add new files, too.
        if: steps.check-for-diff.outputs.changed == 'true'
        uses: EndBug/add-and-commit@v9.1.1
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}
        with:
          author_name: ${{ env.GIT_AUTHOR }}
          author_email: ${{ env.GIT_EMAIL }}
          message: Update env.yml file
          new_branch: ${{ env.BRANCH_NAME }}
          
      - name: Set Default PR Title
        if: steps.check-for-diff.outputs.changed == 'true'
        run: |
          echo "PR_TITLE=Update" >> "$GITHUB_ENV"
          
      - name: Create PR for updated API
        # Create a deployments PR for the updated specification. This is only done if a PR doesn't already exist for the branch.
        #if: steps.check-for-diff.outputs.changed == 'true' && steps.checkout-existing-pr.outcome == 'failure'
       #env:
         # GITHUB_TOKEN: ${{ secrets.PAT }}
        run: |
          echo ${{ secrets.PAT }} | gh auth login --with-token
          gh pr create --title "Create ${{ env.CURRENT_ENV }} database ecom_${{ env.REALMID }}" --body "This is to update database template in env.yml file" --base main --fill      
       
      - name: successful Run
        run: |
          # setup successful output information
          echo "ALERT_CATEGORY=INFORMATION" >> "$GITHUB_ENV"
          echo "ALERT_MESSAGE='Realm UI Tests passed.'" >> "$GITHUB_ENV"
          
      - name: Failed Run
        if: failure()
        run: |
          # setup failure output information
          echo "ALERT_CATEGORY=ERROR" >> "$GITHUB_ENV"
          echo "ALERT_MESSAGE='Realm UI Tests failed.'" >> "$GITHUB_ENV"
